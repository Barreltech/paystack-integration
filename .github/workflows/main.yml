name: Deploy Spring Boot to EKS

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK for building Spring Boot application
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      # Step 3: Build the Spring Boot application
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Log in to AWS ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 5: Build and tag Docker image
      - name: Build and tag Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG

      # Step 6: Push Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG

      # Step 7: Set up kubectl
      - name: Setup kubectl
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER }}

      # Step 8: Deploy to EKS
      - name: Deploy to EKS
        run: |
          IMAGE_TAG=${{ github.sha }}
          kubectl set image deployment/${{ secrets.K8S_DEPLOYMENT_NAME }} \
            ${{ secrets.K8S_CONTAINER_NAME }}=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG
